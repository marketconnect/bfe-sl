diff --git a/api/handlers.go b/api/handlers.go
index 6333634..2451000 100644
--- a/api/handlers.go
+++ b/api/handlers.go
@@ -12,6 +12,7 @@
 
 	"github.com/marketconnect/bfe-sl/auth"
 	"github.com/marketconnect/bfe-sl/db"
+	"github.com/marketconnect/bfe-sl/email"
 	"github.com/marketconnect/bfe-sl/models"
 	"github.com/marketconnect/bfe-sl/s3"
 
@@ -21,6 +22,7 @@
 type Handler struct {
 	Store      db.Store
 	S3Client   *s3.Client
+	EmailClient *email.Client
 	JwtSecret  string
 	PreSignTTL time.Duration
 }
@@ -147,6 +149,13 @@
 		}
 	}
 
+	if req.SendAuthByEmail && req.Email != "" {
+		err := h.EmailClient.SendAuthDetails(c.Request.Context(), req.Email, req.Username, req.Password)
+		if err != nil {
+			log.Printf("WARN: User %d created successfully, but failed to send auth email to %s: %v", user.ID, req.Email, err)
+		}
+	}
+
 	c.JSON(http.StatusCreated, gin.H{"message": "user created successfully", "user_id": user.ID, "password": req.Password})
 }
 
diff --git a/config/config.go b/config/config.go
index 4554238..130725a 100644
--- a/config/config.go
+++ b/config/config.go
@@ -18,6 +18,12 @@
 	AdminPassword     string
 	OriginURL         string
 	PresignTTLSeconds int
+	SESEndpoint       string
+	SESRegion         string
+	SESAccessKeyID    string
+	SESSecretAccessKey string
+	EmailFrom         string
+	AppLoginURL       string
 }
 
 func Load() *Config {
@@ -46,6 +52,12 @@
 		AdminPassword:     getEnv("ADMIN_PASSWORD", ""),
 		OriginURL:         getEnv("ORIGIN_URL", "http://localhost:8080"),
 		PresignTTLSeconds: getEnvInt("PRESIGN_TTL_SECONDS", 45, 10, 3600),
+		SESEndpoint:       getEnv("SES_ENDPOINT", "https://email.cloud.yandex.net"),
+		SESRegion:         getEnv("SES_REGION", "ru-central1"),
+		SESAccessKeyID:    getEnv("SES_ACCESS_KEY_ID", ""),
+		SESSecretAccessKey: getEnv("SES_SECRET_ACCESS_KEY", ""),
+		EmailFrom:         getEnv("EMAIL_FROM", ""),
+		AppLoginURL:       getEnv("APP_LOGIN_URL", ""),
 	}
 }
 
diff --git a/email/client.go b/email/client.go
new file mode 100644
index 0000000..93c761e
--- /dev/null
+++ b/email/client.go
@@ -0,0 +1,78 @@
+package email
+
+import (
+	"context"
+	"fmt"
+	"log"
+
+	"github.com/aws/aws-sdk-go-v2/aws"
+	"github.com/aws/aws-sdk-go-v2/config"
+	"github.com/aws/aws-sdk-go-v2/credentials"
+	"github.com/aws/aws-sdk-go-v2/service/sesv2"
+	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
+	appconfig "github.com/marketconnect/bfe-sl/config"
+)
+
+type Client struct {
+	SESClient *sesv2.Client
+	Sender    string
+	LoginURL  string
+}
+
+func NewClient(appCfg *appconfig.Config) *Client {
+	resolver := aws.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (aws.Endpoint, error) {
+		return aws.Endpoint{
+			URL:           appCfg.SESEndpoint,
+			SigningRegion: appCfg.SESRegion,
+		}, nil
+	})
+
+	cfg, err := config.LoadDefaultConfig(context.TODO(),
+		config.WithEndpointResolverWithOptions(resolver),
+		config.WithCredentialsProvider(credentials.NewStaticCredentialsProvider(appCfg.SESAccessKeyID, appCfg.SESSecretAccessKey, "")),
+		config.WithRegion(appCfg.SESRegion),
+	)
+	if err != nil {
+		log.Fatalf("failed to load SES config: %v", err)
+	}
+
+	sesClient := sesv2.NewFromConfig(cfg)
+
+	return &Client{
+		SESClient: sesClient,
+		Sender:    appCfg.EmailFrom,
+		LoginURL:  appCfg.AppLoginURL,
+	}
+}
+
+func (c *Client) SendAuthDetails(ctx context.Context, recipientEmail, username, password string) error {
+	subject := "Добро пожаловать в систему"
+	body := fmt.Sprintf(
+		"Здравствуйте!\n\nДля вас была создана учетная запись в нашей системе.\n\nДанные для входа:\nЛогин: %s\nПароль: %s\n\nВы можете войти в систему по ссылке: %s\n\nЭто письмо сгенерировано автоматически, пожалуйста, не отвечайте на него.",
+		username,
+		password,
+		c.LoginURL,
+	)
+
+	input := &sesv2.SendEmailInput{
+		FromEmailAddress: &c.Sender,
+		Destination: &types.Destination{
+			ToAddresses: []string{recipientEmail},
+		},
+		Content: &types.EmailContent{
+			Simple: &types.Message{
+				Subject: &types.Content{
+					Data: &subject,
+				},
+				Body: &types.Body{
+					Text: &types.Content{
+						Data: &body,
+					},
+				},
+			},
+		},
+	}
+
+	_, err := c.SESClient.SendEmail(ctx, input)
+	return err
+}
diff --git a/main.go b/main.go
index 684260d..124747a 100644
--- a/main.go
+++ b/main.go
@@ -9,6 +9,7 @@
 	"github.com/gin-gonic/gin"
 	"github.com/marketconnect/bfe-sl/api"
 	"github.com/marketconnect/bfe-sl/config"
+	"github.com/marketconnect/bfe-sl/email"
 	"github.com/marketconnect/bfe-sl/db"
 	"github.com/marketconnect/bfe-sl/models"
 	"github.com/marketconnect/bfe-sl/s3"
@@ -34,11 +35,14 @@
 	store := &db.YdbStore{Driver: ydbDriver}
 
 	s3Client := s3.NewClient(cfg)
+	emailClient := email.NewClient(cfg)
 
 	seedAdminUser(ctx, store, cfg)
 
 	handler := &api.Handler{
 		Store:      store,
 		S3Client:   s3Client,
+		EmailClient: emailClient,
 		JwtSecret:  cfg.JWTSecretKey,
 		PreSignTTL: time.Duration(cfg.PresignTTLSeconds) * time.Second,
 	}
diff --git a/models/models.go b/models/models.go
index 237471a..557161b 100644
--- a/models/models.go
+++ b/models/models.go
@@ -40,6 +40,7 @@
 	Alias    string `json:"alias"`
 	Email    string `json:"email"`
 	IsAdmin  bool   `json:"is_admin"`
+	SendAuthByEmail bool   `json:"sendAuthByEmail"`
 }
 
 type AssignPermissionRequest struct {